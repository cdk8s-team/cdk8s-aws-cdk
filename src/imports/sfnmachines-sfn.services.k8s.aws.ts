// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * StateMachine is the Schema for the StateMachines API
 *
 * @schema StateMachine
 */
export class StateMachine extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StateMachine"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sfn.services.k8s.aws/v1alpha1',
    kind: 'StateMachine',
  };

  /**
   * Renders a Kubernetes manifest for "StateMachine".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StateMachineProps = {}): any {
    return {
      ...StateMachine.GVK,
      ...toJson_StateMachineProps(props),
    };
  }

  /**
   * Defines a "StateMachine" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StateMachineProps = {}) {
    super(scope, id, {
      ...StateMachine.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StateMachine.GVK,
      ...toJson_StateMachineProps(resolved),
    };
  }
}

/**
 * StateMachine is the Schema for the StateMachines API
 *
 * @schema StateMachine
 */
export interface StateMachineProps {
  /**
   * @schema StateMachine#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * StateMachineSpec defines the desired state of StateMachine.
   *
   * @schema StateMachine#spec
   */
  readonly spec?: StateMachineSpec;

}

/**
 * Converts an object of type 'StateMachineProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineProps(obj: StateMachineProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StateMachineSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StateMachineSpec defines the desired state of StateMachine.
 *
 * @schema StateMachineSpec
 */
export interface StateMachineSpec {
  /**
   * The Amazon States Language definition of the state machine. See Amazon States Language (https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
   *
   * @schema StateMachineSpec#definition
   */
  readonly definition: string;

  /**
   * Defines what execution history events are logged and where they are logged.
   * By default, the level is set to OFF. For more information see Log Levels (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
   *
   * @schema StateMachineSpec#loggingConfiguration
   */
  readonly loggingConfiguration?: StateMachineSpecLoggingConfiguration;

  /**
   * The name of the state machine.
   * A name must not contain:
   * * white space
   * * brackets < > { } [ ]
   * * wildcard characters ? *
   * * special characters " # % \ ^ | ~ ` $ & , ; : /
   * * control characters (U+0000-001F, U+007F-009F)
   * To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
   *
   * @schema StateMachineSpec#name
   */
  readonly name: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
   *
   * @schema StateMachineSpec#roleARN
   */
  readonly roleArn: string;

  /**
   * Tags to be added when creating a state machine.
   * An array of key-value pairs. For more information, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the AWS Billing and Cost Management User Guide, and Controlling Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
   * Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
   *
   * @schema StateMachineSpec#tags
   */
  readonly tags?: StateMachineSpecTags[];

  /**
   * Selects whether AWS X-Ray tracing is enabled.
   *
   * @schema StateMachineSpec#tracingConfiguration
   */
  readonly tracingConfiguration?: StateMachineSpecTracingConfiguration;

  /**
   * Determines whether a Standard or Express state machine is created. The default is STANDARD. You cannot update the type of a state machine once it has been created.
   *
   * @schema StateMachineSpec#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'StateMachineSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpec(obj: StateMachineSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': obj.definition,
    'loggingConfiguration': toJson_StateMachineSpecLoggingConfiguration(obj.loggingConfiguration),
    'name': obj.name,
    'roleARN': obj.roleArn,
    'tags': obj.tags?.map(y => toJson_StateMachineSpecTags(y)),
    'tracingConfiguration': toJson_StateMachineSpecTracingConfiguration(obj.tracingConfiguration),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines what execution history events are logged and where they are logged.
 * By default, the level is set to OFF. For more information see Log Levels (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
 *
 * @schema StateMachineSpecLoggingConfiguration
 */
export interface StateMachineSpecLoggingConfiguration {
  /**
   * @schema StateMachineSpecLoggingConfiguration#destinations
   */
  readonly destinations?: StateMachineSpecLoggingConfigurationDestinations[];

  /**
   * @schema StateMachineSpecLoggingConfiguration#includeExecutionData
   */
  readonly includeExecutionData?: boolean;

  /**
   * @schema StateMachineSpecLoggingConfiguration#level
   */
  readonly level?: string;

}

/**
 * Converts an object of type 'StateMachineSpecLoggingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecLoggingConfiguration(obj: StateMachineSpecLoggingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinations': obj.destinations?.map(y => toJson_StateMachineSpecLoggingConfigurationDestinations(y)),
    'includeExecutionData': obj.includeExecutionData,
    'level': obj.level,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Tags are key-value pairs that can be associated with Step Functions state machines and activities.
 * An array of key-value pairs. For more information, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the AWS Billing and Cost Management User Guide, and Controlling Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
 * Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
 *
 * @schema StateMachineSpecTags
 */
export interface StateMachineSpecTags {
  /**
   * @schema StateMachineSpecTags#key
   */
  readonly key?: string;

  /**
   * @schema StateMachineSpecTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'StateMachineSpecTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecTags(obj: StateMachineSpecTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects whether AWS X-Ray tracing is enabled.
 *
 * @schema StateMachineSpecTracingConfiguration
 */
export interface StateMachineSpecTracingConfiguration {
  /**
   * @schema StateMachineSpecTracingConfiguration#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'StateMachineSpecTracingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecTracingConfiguration(obj: StateMachineSpecTracingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StateMachineSpecLoggingConfigurationDestinations
 */
export interface StateMachineSpecLoggingConfigurationDestinations {
  /**
   * @schema StateMachineSpecLoggingConfigurationDestinations#cloudWatchLogsLogGroup
   */
  readonly cloudWatchLogsLogGroup?: StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup;

}

/**
 * Converts an object of type 'StateMachineSpecLoggingConfigurationDestinations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecLoggingConfigurationDestinations(obj: StateMachineSpecLoggingConfigurationDestinations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudWatchLogsLogGroup': toJson_StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup(obj.cloudWatchLogsLogGroup),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup
 */
export interface StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup {
  /**
   * @schema StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup#logGroupARN
   */
  readonly logGroupArn?: string;

}

/**
 * Converts an object of type 'StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup(obj: StateMachineSpecLoggingConfigurationDestinationsCloudWatchLogsLogGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logGroupARN': obj.logGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

