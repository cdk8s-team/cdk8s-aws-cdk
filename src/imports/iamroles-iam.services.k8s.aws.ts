// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Role is the Schema for the Roles API
 *
 * @schema Role
 */
export class Role extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Role"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.services.k8s.aws/v1alpha1',
    kind: 'Role',
  };

  /**
   * Renders a Kubernetes manifest for "Role".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RoleProps = {}): any {
    return {
      ...Role.GVK,
      ...toJson_RoleProps(props),
    };
  }

  /**
   * Defines a "Role" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RoleProps = {}) {
    super(scope, id, {
      ...Role.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Role.GVK,
      ...toJson_RoleProps(resolved),
    };
  }
}

/**
 * Role is the Schema for the Roles API
 *
 * @schema Role
 */
export interface RoleProps {
  /**
   * @schema Role#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RoleSpec defines the desired state of Role.
   * Contains information about an IAM role. This structure is returned as a response element in several API operations that interact with roles.
   *
   * @schema Role#spec
   */
  readonly spec?: RoleSpec;

}

/**
 * Converts an object of type 'RoleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleProps(obj: RoleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RoleSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RoleSpec defines the desired state of Role.
 * Contains information about an IAM role. This structure is returned as a response element in several API operations that interact with roles.
 *
 * @schema RoleSpec
 */
export interface RoleSpec {
  /**
   * The trust relationship policy document that grants an entity permission to assume the role.
   * In IAM, you must provide a JSON policy that has been converted to a string. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.
   * The regex pattern (http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
   * * Any printable ASCII character ranging from the space character (\u0020)    through the end of the ASCII character range
   * * The printable characters in the Basic Latin and Latin-1 Supplement character    set (through \u00FF)
   * * The special characters tab (\u0009), line feed (\u000A), and carriage    return (\u000D)
   * Upon success, the response includes the same trust policy in JSON format.
   *
   * @schema RoleSpec#assumeRolePolicyDocument
   */
  readonly assumeRolePolicyDocument: string;

  /**
   * A description of the role.
   *
   * @schema RoleSpec#description
   */
  readonly description?: string;

  /**
   * The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
   * Anyone who assumes the role from the or API can use the DurationSeconds API parameter or the duration-seconds CLI parameter to request a longer session. The MaxSessionDuration setting determines the maximum duration that can be requested using the DurationSeconds parameter. If users don't specify a value for the DurationSeconds parameter, their security credentials are valid for one hour by default. This applies when you use the AssumeRole* API operations or the assume-role* CLI operations but does not apply when you use those operations to create a console URL. For more information, see Using IAM roles (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the IAM User Guide.
   *
   * @schema RoleSpec#maxSessionDuration
   */
  readonly maxSessionDuration?: number;

  /**
   * The name of the role to create.
   * IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".
   *
   * @schema RoleSpec#name
   */
  readonly name: string;

  /**
   * The path to the role. For more information about paths, see IAM Identifiers (https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the IAM User Guide.
   * This parameter is optional. If it is not included, it defaults to a slash (/).
   * This parameter allows (through its regex pattern (http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
   *
   * @schema RoleSpec#path
   */
  readonly path?: string;

  /**
   * The ARN of the policy that is used to set the permissions boundary for the role.
   *
   * @schema RoleSpec#permissionsBoundary
   */
  readonly permissionsBoundary?: string;

  /**
   * @schema RoleSpec#policies
   */
  readonly policies?: string[];

  /**
   * A list of tags that you want to attach to the new role. Each tag consists of a key name and an associated value. For more information about tagging, see Tagging IAM resources (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
   * If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
   *
   * @schema RoleSpec#tags
   */
  readonly tags?: RoleSpecTags[];

}

/**
 * Converts an object of type 'RoleSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleSpec(obj: RoleSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'assumeRolePolicyDocument': obj.assumeRolePolicyDocument,
    'description': obj.description,
    'maxSessionDuration': obj.maxSessionDuration,
    'name': obj.name,
    'path': obj.path,
    'permissionsBoundary': obj.permissionsBoundary,
    'policies': obj.policies?.map(y => y),
    'tags': obj.tags?.map(y => toJson_RoleSpecTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A structure that represents user-provided metadata that can be associated with an IAM resource. For more information about tagging, see Tagging IAM resources (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
 *
 * @schema RoleSpecTags
 */
export interface RoleSpecTags {
  /**
   * @schema RoleSpecTags#key
   */
  readonly key?: string;

  /**
   * @schema RoleSpecTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'RoleSpecTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleSpecTags(obj: RoleSpecTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

