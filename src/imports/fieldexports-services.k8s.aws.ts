// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * FieldExport is the schema for the FieldExport API.
 *
 * @schema FieldExport
 */
export class FieldExport extends ApiObject {
  /**
   * Returns the apiVersion and kind for "FieldExport"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'services.k8s.aws/v1alpha1',
    kind: 'FieldExport',
  };

  /**
   * Renders a Kubernetes manifest for "FieldExport".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FieldExportProps = {}): any {
    return {
      ...FieldExport.GVK,
      ...toJson_FieldExportProps(props),
    };
  }

  /**
   * Defines a "FieldExport" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FieldExportProps = {}) {
    super(scope, id, {
      ...FieldExport.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...FieldExport.GVK,
      ...toJson_FieldExportProps(resolved),
    };
  }
}

/**
 * FieldExport is the schema for the FieldExport API.
 *
 * @schema FieldExport
 */
export interface FieldExportProps {
  /**
   * @schema FieldExport#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FieldExportSpec defines the desired state of the FieldExport.
   *
   * @schema FieldExport#spec
   */
  readonly spec?: FieldExportSpec;

}

/**
 * Converts an object of type 'FieldExportProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportProps(obj: FieldExportProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FieldExportSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportSpec defines the desired state of the FieldExport.
 *
 * @schema FieldExportSpec
 */
export interface FieldExportSpec {
  /**
   * ResourceFieldSelector provides the values necessary to identify an individual field on an individual K8s resource.
   *
   * @schema FieldExportSpec#from
   */
  readonly from: FieldExportSpecFrom;

  /**
   * FieldExportTarget provides the values necessary to identify the output path for a field export.
   *
   * @schema FieldExportSpec#to
   */
  readonly to: FieldExportSpecTo;

}

/**
 * Converts an object of type 'FieldExportSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpec(obj: FieldExportSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': toJson_FieldExportSpecFrom(obj.from),
    'to': toJson_FieldExportSpecTo(obj.to),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceFieldSelector provides the values necessary to identify an individual field on an individual K8s resource.
 *
 * @schema FieldExportSpecFrom
 */
export interface FieldExportSpecFrom {
  /**
   * @schema FieldExportSpecFrom#path
   */
  readonly path: string;

  /**
   * NamespacedResource provides all the values necessary to identify an ACK resource of a given type (within the same namespace as the custom resource containing this type).
   *
   * @schema FieldExportSpecFrom#resource
   */
  readonly resource: FieldExportSpecFromResource;

}

/**
 * Converts an object of type 'FieldExportSpecFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecFrom(obj: FieldExportSpecFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'resource': toJson_FieldExportSpecFromResource(obj.resource),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportTarget provides the values necessary to identify the output path for a field export.
 *
 * @schema FieldExportSpecTo
 */
export interface FieldExportSpecTo {
  /**
   * FieldExportOutputType represents all types that can be produced by a field export operation
   *
   * @schema FieldExportSpecTo#kind
   */
  readonly kind: FieldExportSpecToKind;

  /**
   * @schema FieldExportSpecTo#name
   */
  readonly name: string;

  /**
   * Namespace is marked as optional, so we cannot compose `NamespacedName`
   *
   * @schema FieldExportSpecTo#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'FieldExportSpecTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecTo(obj: FieldExportSpecTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NamespacedResource provides all the values necessary to identify an ACK resource of a given type (within the same namespace as the custom resource containing this type).
 *
 * @schema FieldExportSpecFromResource
 */
export interface FieldExportSpecFromResource {
  /**
   * @schema FieldExportSpecFromResource#group
   */
  readonly group: string;

  /**
   * @schema FieldExportSpecFromResource#kind
   */
  readonly kind: string;

  /**
   * @schema FieldExportSpecFromResource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'FieldExportSpecFromResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecFromResource(obj: FieldExportSpecFromResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportOutputType represents all types that can be produced by a field export operation
 *
 * @schema FieldExportSpecToKind
 */
export enum FieldExportSpecToKind {
  /** configmap */
  CONFIGMAP = 'configmap',
  /** secret */
  SECRET = 'secret',
}

