// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Function is the Schema for the Functions API
 *
 * @schema Function
 */
export class Function extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Function"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'lambda.services.k8s.aws/v1alpha1',
    kind: 'Function',
  };

  /**
   * Renders a Kubernetes manifest for "Function".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FunctionProps = {}): any {
    return {
      ...Function.GVK,
      ...toJson_FunctionProps(props),
    };
  }

  /**
   * Defines a "Function" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FunctionProps = {}) {
    super(scope, id, {
      ...Function.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Function.GVK,
      ...toJson_FunctionProps(resolved),
    };
  }
}

/**
 * Function is the Schema for the Functions API
 *
 * @schema Function
 */
export interface FunctionProps {
  /**
   * @schema Function#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FunctionSpec defines the desired state of Function.
   *
   * @schema Function#spec
   */
  readonly spec?: FunctionSpec;

}

/**
 * Converts an object of type 'FunctionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionProps(obj: FunctionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FunctionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FunctionSpec defines the desired state of Function.
 *
 * @schema FunctionSpec
 */
export interface FunctionSpec {
  /**
   * The instruction set architecture that the function supports. Enter a string array with one of the valid values. The default value is x86_64.
   *
   * @schema FunctionSpec#architectures
   */
  readonly architectures?: string[];

  /**
   * The code for the function.
   *
   * @schema FunctionSpec#code
   */
  readonly code: FunctionSpecCode;

  /**
   * To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
   *
   * @schema FunctionSpec#codeSigningConfigARN
   */
  readonly codeSigningConfigArn?: string;

  /**
   * A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead Letter Queues (https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq).
   *
   * @schema FunctionSpec#deadLetterConfig
   */
  readonly deadLetterConfig?: FunctionSpecDeadLetterConfig;

  /**
   * A description of the function.
   *
   * @schema FunctionSpec#description
   */
  readonly description?: string;

  /**
   * Environment variables that are accessible from function code during execution.
   *
   * @schema FunctionSpec#environment
   */
  readonly environment?: FunctionSpecEnvironment;

  /**
   * Connection settings for an Amazon EFS file system.
   *
   * @schema FunctionSpec#fileSystemConfigs
   */
  readonly fileSystemConfigs?: FunctionSpecFileSystemConfigs[];

  /**
   * The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see Programming Model (https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html).
   *
   * @schema FunctionSpec#handler
   */
  readonly handler?: string;

  /**
   * Container image configuration values (https://docs.aws.amazon.com/lambda/latest/dg/configuration-images.html#configuration-images-settings) that override the values in the container image Dockerfile.
   *
   * @schema FunctionSpec#imageConfig
   */
  readonly imageConfig?: FunctionSpecImageConfig;

  /**
   * The ARN of the Amazon Web Services Key Management Service (KMS) key that's used to encrypt your function's environment variables. If it's not provided, Lambda uses a default service key.
   *
   * @schema FunctionSpec#kmsKeyARN
   */
  readonly kmsKeyArn?: string;

  /**
   * A list of function layers (https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
   *
   * @schema FunctionSpec#layers
   */
  readonly layers?: string[];

  /**
   * The amount of memory available to the function (https://docs.aws.amazon.com/lambda/latest/dg/configuration-memory.html) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.
   *
   * @schema FunctionSpec#memorySize
   */
  readonly memorySize?: number;

  /**
   * The name of the Lambda function.
   * Name formats
   * * Function name - my-function.
   * * Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.
   * * Partial ARN - 123456789012:function:my-function.
   * The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
   *
   * @schema FunctionSpec#name
   */
  readonly name: string;

  /**
   * The type of deployment package. Set to Image for container image and set Zip for ZIP archive.
   *
   * @schema FunctionSpec#packageType
   */
  readonly packageType?: string;

  /**
   * Set to true to publish the first version of the function during creation.
   *
   * @schema FunctionSpec#publish
   */
  readonly publish?: boolean;

  /**
   * The number of simultaneous executions to reserve for the function.
   *
   * @schema FunctionSpec#reservedConcurrentExecutions
   */
  readonly reservedConcurrentExecutions?: number;

  /**
   * The Amazon Resource Name (ARN) of the function's execution role.
   *
   * @schema FunctionSpec#role
   */
  readonly role: string;

  /**
   * The identifier of the function's runtime (https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
   *
   * @schema FunctionSpec#runtime
   */
  readonly runtime?: string;

  /**
   * A list of tags (https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
   *
   * @schema FunctionSpec#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For additional information, see Lambda execution environment (https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
   *
   * @schema FunctionSpec#timeout
   */
  readonly timeout?: number;

  /**
   * Set Mode to Active to sample and trace a subset of incoming requests with X-Ray (https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
   *
   * @schema FunctionSpec#tracingConfig
   */
  readonly tracingConfig?: FunctionSpecTracingConfig;

  /**
   * For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings (https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
   *
   * @schema FunctionSpec#vpcConfig
   */
  readonly vpcConfig?: FunctionSpecVpcConfig;

}

/**
 * Converts an object of type 'FunctionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpec(obj: FunctionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'architectures': obj.architectures?.map(y => y),
    'code': toJson_FunctionSpecCode(obj.code),
    'codeSigningConfigARN': obj.codeSigningConfigArn,
    'deadLetterConfig': toJson_FunctionSpecDeadLetterConfig(obj.deadLetterConfig),
    'description': obj.description,
    'environment': toJson_FunctionSpecEnvironment(obj.environment),
    'fileSystemConfigs': obj.fileSystemConfigs?.map(y => toJson_FunctionSpecFileSystemConfigs(y)),
    'handler': obj.handler,
    'imageConfig': toJson_FunctionSpecImageConfig(obj.imageConfig),
    'kmsKeyARN': obj.kmsKeyArn,
    'layers': obj.layers?.map(y => y),
    'memorySize': obj.memorySize,
    'name': obj.name,
    'packageType': obj.packageType,
    'publish': obj.publish,
    'reservedConcurrentExecutions': obj.reservedConcurrentExecutions,
    'role': obj.role,
    'runtime': obj.runtime,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'timeout': obj.timeout,
    'tracingConfig': toJson_FunctionSpecTracingConfig(obj.tracingConfig),
    'vpcConfig': toJson_FunctionSpecVpcConfig(obj.vpcConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The code for the function.
 *
 * @schema FunctionSpecCode
 */
export interface FunctionSpecCode {
  /**
   * @schema FunctionSpecCode#imageURI
   */
  readonly imageUri?: string;

  /**
   * @schema FunctionSpecCode#s3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema FunctionSpecCode#s3Key
   */
  readonly s3Key?: string;

  /**
   * @schema FunctionSpecCode#s3ObjectVersion
   */
  readonly s3ObjectVersion?: string;

  /**
   * @schema FunctionSpecCode#zipFile
   */
  readonly zipFile?: string;

}

/**
 * Converts an object of type 'FunctionSpecCode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecCode(obj: FunctionSpecCode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'imageURI': obj.imageUri,
    's3Bucket': obj.s3Bucket,
    's3Key': obj.s3Key,
    's3ObjectVersion': obj.s3ObjectVersion,
    'zipFile': obj.zipFile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead Letter Queues (https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq).
 *
 * @schema FunctionSpecDeadLetterConfig
 */
export interface FunctionSpecDeadLetterConfig {
  /**
   * @schema FunctionSpecDeadLetterConfig#targetARN
   */
  readonly targetArn?: string;

}

/**
 * Converts an object of type 'FunctionSpecDeadLetterConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecDeadLetterConfig(obj: FunctionSpecDeadLetterConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'targetARN': obj.targetArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Environment variables that are accessible from function code during execution.
 *
 * @schema FunctionSpecEnvironment
 */
export interface FunctionSpecEnvironment {
  /**
   * @schema FunctionSpecEnvironment#variables
   */
  readonly variables?: { [key: string]: string };

}

/**
 * Converts an object of type 'FunctionSpecEnvironment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecEnvironment(obj: FunctionSpecEnvironment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'variables': ((obj.variables) === undefined) ? undefined : (Object.entries(obj.variables).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Details about the connection between a Lambda function and an Amazon EFS file system (https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
 *
 * @schema FunctionSpecFileSystemConfigs
 */
export interface FunctionSpecFileSystemConfigs {
  /**
   * @schema FunctionSpecFileSystemConfigs#arn
   */
  readonly arn?: string;

  /**
   * @schema FunctionSpecFileSystemConfigs#localMountPath
   */
  readonly localMountPath?: string;

}

/**
 * Converts an object of type 'FunctionSpecFileSystemConfigs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecFileSystemConfigs(obj: FunctionSpecFileSystemConfigs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arn': obj.arn,
    'localMountPath': obj.localMountPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Container image configuration values (https://docs.aws.amazon.com/lambda/latest/dg/configuration-images.html#configuration-images-settings) that override the values in the container image Dockerfile.
 *
 * @schema FunctionSpecImageConfig
 */
export interface FunctionSpecImageConfig {
  /**
   * @schema FunctionSpecImageConfig#command
   */
  readonly command?: string[];

  /**
   * @schema FunctionSpecImageConfig#entryPoint
   */
  readonly entryPoint?: string[];

  /**
   * @schema FunctionSpecImageConfig#workingDirectory
   */
  readonly workingDirectory?: string;

}

/**
 * Converts an object of type 'FunctionSpecImageConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecImageConfig(obj: FunctionSpecImageConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
    'entryPoint': obj.entryPoint?.map(y => y),
    'workingDirectory': obj.workingDirectory,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set Mode to Active to sample and trace a subset of incoming requests with X-Ray (https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
 *
 * @schema FunctionSpecTracingConfig
 */
export interface FunctionSpecTracingConfig {
  /**
   * @schema FunctionSpecTracingConfig#mode
   */
  readonly mode?: string;

}

/**
 * Converts an object of type 'FunctionSpecTracingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecTracingConfig(obj: FunctionSpecTracingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings (https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
 *
 * @schema FunctionSpecVpcConfig
 */
export interface FunctionSpecVpcConfig {
  /**
   * @schema FunctionSpecVpcConfig#securityGroupIDs
   */
  readonly securityGroupIDs?: string[];

  /**
   * @schema FunctionSpecVpcConfig#subnetIDs
   */
  readonly subnetIDs?: string[];

}

/**
 * Converts an object of type 'FunctionSpecVpcConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FunctionSpecVpcConfig(obj: FunctionSpecVpcConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'securityGroupIDs': obj.securityGroupIDs?.map(y => y),
    'subnetIDs': obj.subnetIDs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

